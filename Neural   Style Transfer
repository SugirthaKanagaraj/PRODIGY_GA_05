import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np
import time
from tensorflow.keras.preprocessing import image as kp_image
from tensorflow.keras.applications import vgg19

# Helper function to load and preprocess images
def load_and_process_img(img_path):
    img = kp_image.load_img(img_path, target_size=(512, 512))
    img = kp_image.img_to_array(img)
    img = np.expand_dims(img, axis=0)
    img = vgg19.preprocess_input(img)
    return img

# Helper function to deprocess an image to display it
def deprocess_img(processed_img):
    x = processed_img.copy()
    if len(x.shape) == 4:
        x = np.squeeze(x, 0)
    
    x[:, :, 0] += 103.939
    x[:, :, 1] += 116.779
    x[:, :, 2] += 123.68
    x = x[:, :, ::-1]
    x = np.clip(x, 0, 255).astype('uint8')
    return x

# Load the VGG19 model for neural style transfer
def get_model():
    vgg = vgg19.VGG19(include_top=False, weights='imagenet')
    vgg.trainable = False
    style_layers = ['block1_conv1', 'block2_conv1', 'block3_conv1', 'block4_conv1', 'block5_conv1']
    content_layers = ['block5_conv2']
    output_layers = style_layers + content_layers
    model_outputs = [vgg.get_layer(name).output for name in output_layers]
    return tf.keras.Model(vgg.input, model_outputs)

# Style and Content representations
def get_content_loss(base_content, target):
    return tf.reduce_mean(tf.square(base_content - target))

def gram_matrix(input_tensor):
    channels = int(input_tensor.shape[-1])
    a = tf.reshape(input_tensor, [-1, channels])
    n = tf.shape(a)[0]
    gram = tf.matmul(a, a, transpose_a=True)
    return gram / tf.cast(n, tf.float32)

def get_style_loss(base_style, gram_target):
    gram_style = gram_matrix(base_style)
    return tf.reduce_mean(tf.square(gram_style - gram_target))

def compute_loss(model, loss_weights, init_image, gram_style_features, content_features):
    style_weight, content_weight = loss_weights
    model_outputs = model(init_image)
    
    style_output_features = model_outputs[:num_style_layers]
    content_output_features = model_outputs[num_style_layers:]
    
    style_score = 0
    content_score = 0
    
    weight_per_style_layer = 1.0 / float(num_style_layers)
    for target_style, comb_style in zip(gram_style_features, style_output_features):
        style_score += weight_per_style_layer * get_style_loss(comb_style[0], target_style)
    
    weight_per_content_layer = 1.0 / float(num_content_layers)
    for target_content, comb_content in zip(content_features, content_output_features):
        content_score += weight_per_content_layer * get_content_loss(comb_content[0], target_content)
    
    style_score *= style_weight
    content_score *= content_weight
    loss = style_score + content_score
    return loss, style_score, content_score

# Compute gradients and perform backpropagation
@tf.function()
def compute_grads(cfg):
    with tf.GradientTape() as tape:
        all_loss = compute_loss(**cfg)
    total_loss = all_loss[0]
    return tape.gradient(total_loss, cfg['init_image']), all_loss

# Load and process content and style images
content_path = 'path_to_your_content_image.jpg'  # Replace with your content image path
style_path = 'path_to_your_style_image.jpg'      # Replace with your style image path

content_image = load_and_process_img(content_path)
style_image = load_and_process_img(style_path)

# Load the model and extract style/content features
model = get_model()

# Get style and content feature representations
def get_feature_representations(model, content_path, style_path):
    content_image = load_and_process_img(content_path)
    style_image = load_and_process_img(style_path)
    
    style_outputs = model(style_image)
    content_outputs = model(content_image)
    
    style_features = [style_layer[0] for style_layer in style_outputs[:num_style_layers]]
    content_features = [content_layer[0] for content_layer in content_outputs[num_style_layers:]]
    
    return style_features, content_features

style_features, content_features = get_feature_representations(model, content_path, style_path)

# Get the gram matrices for style features
gram_style_features = [gram_matrix(style_feature) for style_feature in style_features]

# Set initial image and optimization variables
init_image = tf.Variable(content_image, dtype=tf.float32)
opt = tf.optimizers.Adam(learning_rate=5, beta_1=0.99, epsilon=1e-1)

# Style and content weights
style_weight = 1e-2
content_weight = 1e4
loss_weights = (style_weight, content_weight)

# Training step for optimization
num_style_layers = 5
num_content_layers = 1

# Perform the neural style transfer
epochs = 10
steps_per_epoch = 100

step = 0
for n in range(epochs):
    for m in range(steps_per_epoch):
        step += 1
        grads, all_loss = compute_grads({
            'model': model,
            'loss_weights': loss_weights,
            'init_image': init_image,
            'gram_style_features': gram_style_features,
            'content_features': content_features
        })
        opt.apply_gradients([(grads, init_image)])
        print(f"Step {step}, Loss: {all_loss[0]:.4e}, Style Loss: {all_loss[1]:.4e}, Content Loss: {all_loss[2]:.4e}")
        
        if step % 100 == 0:
            # Deprocess and display the generated image
            plt.imshow(deprocess_img(init_image.numpy()))
            plt.show()

# Save the final image
final_image = deprocess_img(init_image.numpy())
plt.imsave("output_image.jpg", final_image)
